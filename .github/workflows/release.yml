name: Release

on:
  workflow_dispatch:
    inputs:
      skip_github_release:
        description: 'Skip GitHub release creation'
        type: boolean
        default: false
      skip_binary_build:
        description: 'Skip binary builds'
        type: boolean
        default: false
      skip_crates_publish:
        description: 'Skip publishing to crates.io'
        type: boolean
        default: false

jobs:
  verify-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check version consistency
        run: |
          # Get version from Cargo.toml
          CARGO_VERSION=$(grep -m 1 '^version = ' Cargo.toml | cut -d '"' -f2)
          echo "Cargo.toml version: $CARGO_VERSION"
          
          # Check if this version exists in CHANGELOG.md
          if ! grep -q "^\## \[$CARGO_VERSION\]" CHANGELOG.md; then
            echo "::error::Version $CARGO_VERSION not found in CHANGELOG.md"
            exit 1
          fi
          
          # Check if CHANGELOG version is marked as Unreleased
          if grep -q "^\## \[$CARGO_VERSION\] - Unreleased" CHANGELOG.md; then
            echo "::error::Version $CARGO_VERSION is still marked as Unreleased in CHANGELOG.md"
            exit 1
          fi
          
          # Check if CHANGELOG version has a date
          if ! grep -q "^\## \[$CARGO_VERSION\] - [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}" CHANGELOG.md; then
            echo "::error::Version $CARGO_VERSION in CHANGELOG.md doesn't have a proper date (YYYY-MM-DD)"
            exit 1
          fi
          
          # Verify version follows semver
          if ! echo "$CARGO_VERSION" | grep -q '^[0-9]\+\.[0-9]\+\.[0-9]\+$'; then
            echo "::error::Version $CARGO_VERSION doesn't follow semantic versioning (X.Y.Z)"
            exit 1
          fi
          
          echo "Version verification passed!"

  verify-workflow-status:
    needs: verify-version
    runs-on: ubuntu-latest
    steps:
      - name: Check workflow status
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check the status of the last Rust workflow run
          rust_status=$(gh run list --workflow=Rust --branch main --limit 1 --json conclusion -q '.[0].conclusion')
          if [ "$rust_status" != "success" ]; then
            echo "::error::Latest Rust workflow run did not succeed. Please ensure tests are passing."
            exit 1
          fi
          
          # Check the status of the last Integration Tests workflow run
          integration_status=$(gh run list --workflow="Integration Tests" --branch main --limit 1 --json conclusion -q '.[0].conclusion')
          if [ "$integration_status" != "success" ]; then
            echo "::error::Latest Integration Tests workflow run did not succeed. Please ensure tests are passing."
            exit 1
          fi

  create-release:
    needs: [verify-version, verify-workflow-status]
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_github_release }}
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      # Check if release already exists
      - name: Check existing release
        id: check_release
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          if gh release view "$TAG_NAME" &> /dev/null; then
            echo "Release already exists"
            UPLOAD_URL=$(gh release view "$TAG_NAME" --json uploadUrl -q .uploadUrl)
            echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        if: steps.check_release.outputs.exists != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    if: ${{ !inputs.skip_binary_build }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            archive_name: dela-linux-amd64.tar.gz
          - build: linux-arm64
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            archive_name: dela-linux-arm64.tar.gz
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            archive_name: dela-darwin-amd64.tar.gz
          - build: macos-arm64
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
            archive_name: dela-darwin-arm64.tar.gz
          - build: windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            archive_name: dela-windows-amd64.zip
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install Cross-Compilation Tools
      if: matrix.build == 'linux-arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build Binary
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Prepare Archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czvf ../../../${{ matrix.archive_name }} dela
        cd -

    - name: Prepare Archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.archive_name }} dela.exe
        cd -

    # Check if asset already exists
    - name: Check existing asset
      id: check_asset
      run: |
        TAG_NAME="${GITHUB_REF#refs/tags/}"
        if gh release view "$TAG_NAME" --json assets -q ".assets[].name" | grep -q "^${{ matrix.archive_name }}$"; then
          echo "Asset already exists"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      if: steps.check_asset.outputs.exists != 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.archive_name }}
        asset_name: ${{ matrix.archive_name }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-release]
    if: ${{ !inputs.skip_crates_publish }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Check if version is already published
      - name: Check if version exists on crates.io
        id: check_version
        run: |
          VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          if cargo search dela --limit 1 | grep -q "dela = \"$VERSION\""; then
            echo "Version $VERSION already exists on crates.io"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Check package
        if: steps.check_version.outputs.exists != 'true'
        run: cargo package --locked

      - name: Publish to crates.io
        if: steps.check_version.outputs.exists != 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --locked 